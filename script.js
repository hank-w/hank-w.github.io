var _top = 0;

var _parent = function (i) {
  return ((i + 1) >>> 1) - 1;
};
var _left = function (i) {
  return (i << 1) + 1;
};
var _right = function (i) {
  return (i + 1) << 1;
};
var PriorityQueueSet = (function () {
  function PriorityQueueSet(comparator) {
    if (comparator === void 0) {
      comparator = function (a, b) {
        return a > b;
      };
    }
    this._set = new Set();
    this._heap = [];
    this._comparator = comparator;
  }
  PriorityQueueSet.prototype.size = function () {
    return this._heap.length;
  };
  PriorityQueueSet.prototype.isEmpty = function () {
    return this.size() == 0;
  };
  PriorityQueueSet.prototype.push = function () {
    var _this = this;
    var values = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      values[_i] = arguments[_i];
    }
    values.forEach(function (value) {
      _this._heap.push(value);
      _this._siftUp();
      _this._set.add(value);
    });
    return this.size();
  };
  PriorityQueueSet.prototype.pop = function () {
    var poppedValue = this._heap[_top];
    var bottom = this.size() - 1;
    if (bottom > _top) {
      this._swap(_top, bottom);
    }
    this._heap.pop();
    this._siftDown();
    this._set.delete(poppedValue);
    return poppedValue;
  };
  PriorityQueueSet.prototype.has = function (value) {
    return this._set.has(value);
  };
  PriorityQueueSet.prototype._greater = function (i, j) {
    return this._comparator(this._heap[i], this._heap[j]);
  };
  PriorityQueueSet.prototype._swap = function (i, j) {
    var _a;
    (_a = [this._heap[j], this._heap[i]]),
      (this._heap[i] = _a[0]),
      (this._heap[j] = _a[1]);
  };
  PriorityQueueSet.prototype._siftUp = function () {
    var node = this.size() - 1;
    while (node > _top && this._greater(node, _parent(node))) {
      this._swap(node, _parent(node));
      node = _parent(node);
    }
  };
  PriorityQueueSet.prototype._siftDown = function () {
    var node = _top;
    while (
      (_left(node) < this.size() && this._greater(_left(node), node)) ||
      (_right(node) < this.size() && this._greater(_right(node), node))
    ) {
      var maxChild =
        _right(node) < this.size() && this._greater(_right(node), _left(node))
          ? _right(node)
          : _left(node);
      this._swap(node, maxChild);
      node = maxChild;
    }
  };
  return PriorityQueueSet;
})();
var GridSearch = function (selector) {
  var width,
    height,
    canvas = d3.select(selector);
  var context = canvas.node().getContext("2d", { alpha: false });
  width = $(selector).outerWidth();
  height = $(selector).outerHeight();
  context.globalCompositeOperation = "source-over";
  var gridWidth = 50,
    gridHeight = 50;
  var grid;
  function randomize_grid() {
    grid = Array(gridHeight)
      .fill([])
      .map(function (a, i) {
        return Array(gridWidth)
          .fill([])
          .map(function (b, j) {
            i *= 1.0;
            j *= 1.0;
            return (
              -0.4 * Math.random() >
              ((i + j) / (gridHeight + gridWidth)) *
                ((i + j) / (gridHeight + gridWidth) - 1)
            );
          });
      });
    grid[0][0] = grid[0][1] = grid[1][0] = grid[1][1] = false;
    grid[gridWidth - 1][gridHeight - 1] = grid[gridWidth - 1][
      gridHeight - 2
    ] = grid[gridWidth - 2][gridHeight - 1] = grid[gridWidth - 2][
      gridHeight - 2
    ] = false;
  }
  function valid(point) {
    return (
      y(point) >= 0 &&
      y(point) < gridHeight &&
      x(point) >= 0 &&
      x(point) < gridWidth &&
      !grid[y(point)][x(point)]
    );
  }
  function dist_between(point1, point2) {
    return Math.sqrt(
      (y(point1) - y(point2)) * (y(point1) - y(point2)) +
        (x(point1) - x(point2)) * (x(point1) - x(point2))
    );
  }
  function heuristic_cost_est(point1, point2) {
    return dist_between(point1, point2);
  }
  var FUDGE = 100000;
  function point(y, x) {
    return y * FUDGE + x;
  }
  function x(point) {
    return point % FUDGE;
  }
  function y(point) {
    return Math.floor(point / FUDGE);
  }
  function get(map, key) {
    if (map.has(key)) return map.get(key);
    else return Infinity;
  }
  var start = point(0, 0),
    goal = point(gridHeight - 1, gridWidth - 1);
  var gScore;
  var fScore;
  var closedSet;
  var openSet;
  var cameFrom;
  function init_search() {
    gScore = new Map();
    fScore = new Map();
    closedSet = new Set();
    openSet = new PriorityQueueSet(function (a, b) {
      return get(fScore, a) < get(fScore, b);
    });
    openSet.push(start);
    cameFrom = new Map();
    gScore.set(start, 0);
    fScore.set(start, get(gScore, start) + heuristic_cost_est(start, goal));
  }
  function init_draw() {
    context.clearRect(0, 0, width, height);
    for (var i = 0; i < gridHeight; i++)
      for (var j = 0; j < gridWidth; j++)
        change_color(point(i, j), grid[i][j] ? BLOCKED : UNEXPLORED);
  }
  function change_color(p, color) {
    context.fillStyle = color;
    context.fillRect(
      (y(p) * width) / gridWidth,
      (x(p) * height) / gridHeight,
      width / gridWidth,
      height / gridHeight
    );
  }
  var BLOCKED = "black";
  var CLOSED = "#115";
  var OPEN = "#511";
  var UNEXPLORED = "#222";
  function search_iteration() {
    var current = openSet.pop();
    if (current == goal) {
      var curr = goal;
      do {
        change_color(curr, "#090");
        curr = cameFrom.get(curr);
      } while (curr != start && curr !== undefined);
      change_color(start, "#090");
      return true;
    }
    closedSet.add(current);
    change_color(current, CLOSED);
    for (var _i = 0, _a = [-1, 0, 1]; _i < _a.length; _i++) {
      var di = _a[_i];
      for (var _b = 0, _c = [-1, 0, 1]; _b < _c.length; _b++) {
        var dj = _c[_b];
        var neighbor = point(y(current) + di, x(current) + dj);
        if (!valid(neighbor) || neighbor == current) continue;
        if (closedSet.has(neighbor)) continue;
        var tentative_gScore =
          get(gScore, current) + dist_between(current, neighbor);
        if (!openSet.has(neighbor)) {
          openSet.push(neighbor);
          change_color(neighbor, OPEN);
        }
        if (tentative_gScore < get(gScore, neighbor)) {
          cameFrom.set(neighbor, current);
          gScore.set(neighbor, tentative_gScore);
          fScore.set(
            neighbor,
            get(gScore, neighbor) + heuristic_cost_est(neighbor, goal)
          );
        }
      }
    }
    if (openSet.size() == 0) {
      return true;
    }
  }
  function frame_iteration() {
    for (var i = 0; i < 1; i++) {
      if (search_iteration()) {
        setTimeout(reset, 3000);
        break;
      } else {
        window.requestAnimationFrame(frame_iteration);
      }
    }
  }
  function reset() {
    randomize_grid();
    init_search();
    init_draw();
    window.requestAnimationFrame(frame_iteration);
  }
  reset();
  return {
    onclicktouch: function (x, y) {},
  };
};

var Lorenz = function (selector) {
  var dt = 0.001,
    p = 28,
    w = 10,
    beta = 8 / 3;
  var width,
    height,
    canvas = d3.select(selector);
  var context = canvas.node().getContext("2d");
  width = $(selector).outerWidth();
  height = $(selector).outerHeight();
  context.globalCompositeOperation = "source-over";
  context.translate(width / 2, height / 2);
  context.scale(12, 8);
  context.lineWidth = 0.2;
  var color = d3
    .scalePow()
    .domain([-1000000, 0, 8, 23, 55, 1000000])
    .range(["#699", "#699", "#099", "#069", "#009", "#009"])
    .exponent(1.5)
    .interpolate(d3.interpolateRgb);
  function spawnSprite(coords) {
    var x = (coords[0] - width / 2) / 12,
      y = (coords[1] - height / 2) / 8,
      z = 10 + (Math.random() - 0.5) * 10,
      n = Math.random() * 3 + 1,
      t1 = Math.random() * 5000 + 15000,
      offset = Math.random() * 30;
    var t = d3.timer(function (t0) {
      for (var i = 0; i < n; ++i) {
        context.strokeStyle = color(z + offset);
        context.beginPath();
        context.moveTo(x, y);
        x += dt * w * (y - x);
        y += dt * (x * (p - z) - y);
        z += dt * (x * y - beta * z);
        context.lineTo(x, y);
        context.stroke();
      }
      if (t0 > t1) t.stop();
    });
  }
  context.fillStyle = "rgb(0,0,0)";
  context.fillRect(-width / 2, -height / 2, width, height);
  context.globalCompositeOperation = "source-atop";
  context.fillStyle = "rgba(0,0,0,.05)";
  function fadeTick() {
    context.fillRect(-width / 2, -height / 2, width, height);
  }
  var getRandomPoint = function () {
    var x, y;
    if (Math.random() > 0.5) {
      x = width * Math.random();
      y = Math.random() > 0.5 ? height : 0;
    } else {
      y = height * Math.random();
      x = Math.random() > 0.5 ? width : 0;
    }
    return [x, y];
  };
  d3.interval(function (elapsedTime) {
    spawnSprite(getRandomPoint());
  }, 1000);
  d3.interval(function (elapsedTime) {
    fadeTick();
  }, 200);
  for (var i = 0; i < 20; i++) {
    spawnSprite(getRandomPoint());
  }
  return {
    onclicktouch: function (x, y) {
      spawnSprite([x, y]);
    },
  };
};

$(function () {
  var animations = [
    {
      title: "Lorenz Strange Attractor",
      desc:
        "A beautiful chaotic attractor. Click or tap anywhere to add streamers.",
      init: Lorenz,
      scaling: "keep-aspect-ratio",
    },
    {
      title: "A* Grid Search",
      desc: "A simple pathfinding algorithm.",
      init: GridSearch,
      scaling: "stretch",
    },
  ];
  var animationIndex;
  var prevAnimationIndex =
    (Cookies.getJSON("animationIndex") &&
      Cookies.getJSON("animationIndex").i) ||
    -1;
  do {
    animationIndex = Math.floor(Math.random() * animations.length);
  } while (animations.length > 1 && animationIndex == prevAnimationIndex);
  Cookies.set("animationIndex", { i: animationIndex });
  var animation = animations[animationIndex];
  var getDims = function () {
    return {
      width: $("body").outerWidth(),
      height: $("body").outerHeight(),
      ratio: $("body").outerWidth() / $("body").outerHeight(),
    };
  };
  var orig_dims = getDims();
  $("canvas#splash").attr(orig_dims);
  $(window)
    .resize(function () {
      var curr_dims = getDims();
      if (animation.scaling == "stretch") {
        $("canvas#splash").css({
          width: curr_dims.width,
          height: curr_dims.height,
        });
      } else if (animation.scaling == "keep-aspect-ratio") {
        $("canvas#splash").css(
          curr_dims.ratio > orig_dims.ratio
            ? {
                width: curr_dims.width,
                height: curr_dims.width / orig_dims.ratio,
                "margin-left": 0,
                "margin-top":
                  (curr_dims.height - curr_dims.width / orig_dims.ratio) / 2,
              }
            : {
                width: curr_dims.height * orig_dims.ratio,
                height: curr_dims.height,
                "margin-left":
                  (curr_dims.width - curr_dims.height * orig_dims.ratio) / 2,
                "margin-top": 0,
              }
        );
      }
    })
    .resize();
  $(window).on("mousedown click touchstart tap touch", function (e) {
    var curr_dims = getDims();
    if (animation.scaling == "stretch") {
      return props.onclicktouch(
        e.pageX / (curr_dims.width / orig_dims.width),
        e.pageY / (curr_dims.height / orig_dims.height)
      );
    } else if (animation.scaling == "keep-aspect-ratio") {
      var scale =
        curr_dims.ratio > orig_dims.ratio
          ? curr_dims.width / orig_dims.width
          : curr_dims.height / orig_dims.height;
      return props.onclicktouch(
        (e.pageX - parseInt($("canvas#splash").css("margin-left"))) / scale,
        (e.pageY - parseInt($("canvas#splash").css("margin-top"))) / scale
      );
    }
  });
  var props = animation.init("canvas#splash");
  $("canvas#splash").css({ opacity: 1 });
 
  return $("#simulation-info").show();
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkdyaWRTZWFyY2gudHMiLCJMb3JlbnoudHMiLCJtYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVlBLElBQU0sSUFBSSxHQUFHLENBQUMsQ0FBQztBQUNmLElBQU0sT0FBTyxHQUE4QixVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFuQixDQUFtQixDQUFDO0FBQ3BFLElBQU0sS0FBSyxHQUE4QixVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBWixDQUFZLENBQUM7QUFDM0QsSUFBTSxNQUFNLEdBQThCLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFaLENBQVksQ0FBQztBQUM1RDtJQUlFLDBCQUFZLFVBQW9DO1FBQXBDLDJCQUFBLEVBQUEsdUJBQWMsQ0FBSyxFQUFFLENBQUssSUFBSyxPQUFBLENBQUMsR0FBRyxDQUFDLEVBQUwsQ0FBSztRQUM5QyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7UUFDdEIsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUM7SUFDaEMsQ0FBQztJQUNELCtCQUFJLEdBQUo7UUFDRSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDO0lBQzNCLENBQUM7SUFDRCxrQ0FBTyxHQUFQO1FBQ0UsT0FBTyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFDRCwrQkFBSSxHQUFKO1FBQUEsaUJBT0M7UUFQSSxnQkFBZTthQUFmLFVBQWUsRUFBZixxQkFBZSxFQUFmLElBQWU7WUFBZiwyQkFBZTs7UUFDbEIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFBLEtBQUs7WUFDbEIs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QUFDLENBQUMsQ0FBQztZQUMxRyxDQUFDLENBQUM7UUFIRixDQUdFLENBQ0gsQ0FBQztRQUNGLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDMUQsSUFBSSxDQUFDLFNBQVMsR0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLEdBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsR0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLEdBQUMsQ0FBQyxDQUFDO1lBQzdELElBQUksQ0FBQyxTQUFTLEdBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxHQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLEdBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxHQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztJQUNoRixDQUFDO0lBRUQsU0FBUyxLQUFLLENBQUMsS0FBYztRQUMzQixPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLFVBQVU7ZUFDdEMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsU0FBUztlQUNyQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBQ0QsU0FBUyxZQUFZLENBQUMsTUFBZSxFQUFFLE1BQWU7UUFDcEQsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUNkLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1B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LEtBQUssRUFDbkUsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQ25FLENBQUM7U0FDSDtJQUNILENBQUMsQ0FBQyxDQUFDO0lBR0gsSUFBSSxLQUFLLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUc1QyxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDdkMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM1QyxDQUFDLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRywwQ0FBMEMsQ0FBQyxDQUFDO0lBQ3hGLE9BQU8sQ0FBQyxDQUFDLGtCQUFrQixDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDdEMsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoic2NyaXB0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gV2FpdGluZyBvbiBodHRwczovL2dpdGh1Yi5jb20vTWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzEwMTc4XHJcbi8vLyA8cmVmZXJlbmNlIHR5cGVzPVwiZDNcIi8+XHJcbi8vLyA8cmVmZXJlbmNlIHR5cGVzPSd0cy1wb2x5ZmlsbC9saWIvZXMyMDE1LWNvcmUnPlxyXG4vLy8gPHJlZmVyZW5jZSB0eXBlcz0ndHMtcG9seWZpbGwvbGliL2VzMjAxNS1jb2xsZWN0aW9uJz5cclxuLy8vIDxyZWZlcmVuY2UgdHlwZXM9J3RzLXBvbHlmaWxsL2xpYi9lczIwMTctdHlwZWQtYXJyYXlzJz5cclxuXHJcbi8vIEdyaWQgU2VhcmNoXHJcbi8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0EqX3NlYXJjaF9hbGdvcml0aG1cclxuXHJcbi8vIE1heCBoZWFwIGJhc2VkIFBRXHJcbi8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS80MjkxOTc1MlxyXG5cclxuY29uc3QgX3RvcCA9IDA7XHJcbmNvbnN0IF9wYXJlbnQgOiAoKGkgOiBudW1iZXIpID0+IG51bWJlcikgPSBpID0+ICgoaSArIDEpID4+PiAxKSAtIDE7XHJcbmNvbnN0IF9sZWZ0IDogKChpIDogbnVtYmVyKSA9PiBudW1iZXIpID0gaSA9PiAoaSA8PCAxKSArIDE7XHJcbmNvbnN0IF9yaWdodCA6ICgoaSA6IG51bWJlcikgPT4gbnVtYmVyKSA9IGkgPT4gKGkgKyAxKSA8PCAxO1xyXG5jbGFzcyBQcmlvcml0eVF1ZXVlU2V0PFQ+IHtcclxuICBfc2V0OiBTZXQ8VD47XHJcbiAgX2hlYXA6IEFycmF5PFQ+O1xyXG4gIF9jb21wYXJhdG9yOiAoYSA6IFQsIGIgOiBUKSA9PiBib29sZWFuO1xyXG4gIGNvbnN0cnVjdG9yKGNvbXBhcmF0b3IgPSAoYSA6IFQsIGIgOiBUKSA9PiBhID4gYikge1xyXG4gICAgdGhpcy5fc2V0ID0gbmV3IFNldCgpO1xyXG4gICAgdGhpcy5faGVhcCA9IFtdO1xyXG4gICAgdGhpcy5fY29tcGFyYXRvciA9IGNvbXBhcmF0b3I7XHJcbiAgfVxyXG4gIHNpemUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5faGVhcC5sZW5ndGg7XHJcbiAgfVxyXG4gIGlzRW1wdHkoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5zaXplKCkgPT0gMDtcclxuICB9XHJcbiAgcHVzaCguLi52YWx1ZXMgOiBUW10pIHtcclxuICAgIHZhbHVlcy5mb3JFYWNoKHZhbHVlID0+IHtcclxuICAgICAgdGhpcy5faGVhcC5wdXNoKHZhbHVlKTtcclxuICAgICAgdGhpcy5fc2lmdFVwKCk7XHJcbiAgICAgIHRoaXMuX3NldC5hZGQodmFsdWUpO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gdGhpcy5zaXplKCk7XHJcbiAgfVxyXG4gIHBvcCgpIHtcclxuICAgIGNvbnN0IHBvcHBlZFZhbHVlID0gdGhpcy5faGVhcFtfdG9wXTtcclxuICAgIGNvbnN0IGJvdHRvbSA9IHRoaXMuc2l6ZSgpIC0gMTtcclxuICAgIGlmIChib3R0b20gPiBfdG9wKSB7XHJcbiAgICAgIHRoaXMuX3N3YXAoX3RvcCwgYm90dG9tKTtcclxuICAgIH1cclxuICAgIHRoaXMuX2hlYXAucG9wKCk7XHJcbiAgICB0aGlzLl9zaWZ0RG93bigpO1xyXG4gICAgdGhpcy5fc2V0LmRlbGV0ZShwb3BwZWRWYWx1ZSk7XHJcbiAgICByZXR1cm4gcG9wcGVkVmFsdWU7XHJcbiAgfVxyXG4gIGhhcyh2YWx1ZSA6IFQpIHtcclxuICAgIHJldHVybiB0aGlzLl9zZXQuaGFzKHZhbHVlKTtcclxuICB9XHJcbiAgX2dyZWF0ZXIoaSA6IG51bWJlciwgaiA6IG51bWJlcikge1xyXG4gICAgcmV0dXJuIHRoaXMuX2NvbXBhcmF0b3IodGhpcy5faGVhcFtpXSwgdGhpcy5faGVhcFtqXSk7XHJcbiAgfVxyXG4gIF9zd2FwKGkgOiBudW1iZXIsIGogOiBudW1iZXIpIHtcclxuICAgIFt0aGlzLl9oZWFwW2ldLCB0aGlzLl9oZWFwW2pdXSA9IFt0aGlzLl9oZWFwW2pdLCB0aGlzLl9oZWFwW2ldXTtcclxuICB9XHJcbiAgX3NpZnRVcCgpIHtcclxuICAgIGxldCBub2RlID0gdGhpcy5zaXplKCkgLSAxO1xyXG4gICAgd2hpbGUgKG5vZGUgPiBfdG9wICYmIHRoaXMuX2dyZWF0ZXIobm9kZSwgX3BhcmVudChub2RlKSkpIHtcclxuICAgICAgdGhpcy5fc3dhcChub2RlLCBfcGFyZW50KG5vZGUpKTtcclxuICAgICAgbm9kZSA9IF9wYXJlbnQobm9kZSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIF9zaWZ0RG93bigpIHtcclxuICAgIGxldCBub2RlID0gX3RvcDtcclxuICAgIHdoaWxlIChcclxuICAgICAgKF9sZWZ0KG5vZGUpIDwgdGhpcy5zaXplKCkgJiYgdGhpcy5fZ3JlYXRlcihfbGVmdChub2RlKSwgbm9kZSkpIHx8XHJcbiAgICAgIChfcmlnaHQobm9kZSkgPCB0aGlzLnNpemUoKSAmJiB0aGlzLl9ncmVhdGVyKF9yaWdodChub2RlKSwgbm9kZSkpXHJcbiAgICApIHtcclxuICAgICAgbGV0IG1heENoaWxkID0gKF9yaWdodChub2RlKSA8IHRoaXMuc2l6ZSgpICYmIHRoaXMuX2dyZWF0ZXIoX3JpZ2h0KG5vZGUpLCBfbGVmdChub2RlKSkpID8gX3JpZ2h0KG5vZGUpIDogX2xlZnQobm9kZSk7XHJcbiAgICAgIHRoaXMuX3N3YXAobm9kZSwgbWF4Q2hpbGQpO1xyXG4gICAgICBub2RlID0gbWF4Q2hpbGQ7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5jb25zdCBHcmlkU2VhcmNoID0gKHNlbGVjdG9yIDogc3RyaW5nKSA6IHsgb25jbGlja3RvdWNoIDogKHg6IG51bWJlciwgeTogbnVtYmVyKSA9PiB2b2lkIH0gPT4ge1xyXG4gIGxldCB3aWR0aCA6IG51bWJlciwgaGVpZ2h0IDogbnVtYmVyLCBjYW52YXMgPSBkMy5zZWxlY3Qoc2VsZWN0b3IpO1xyXG4gIGxldCBjb250ZXh0ID0gKDxIVE1MQ2FudmFzRWxlbWVudD4gY2FudmFzLm5vZGUoKSkuZ2V0Q29udGV4dChcIjJkXCIsIHsgYWxwaGE6IGZhbHNlIH0pO1xyXG4gIHdpZHRoID0gJChzZWxlY3Rvcikub3V0ZXJXaWR0aCgpO1xyXG4gIGhlaWdodCA9ICQoc2VsZWN0b3IpLm91dGVySGVpZ2h0KCk7XHJcblxyXG4gIC8vIHNldCBob3cgdGhlIG5ldyBpbWFnZXMgYXJlIGRyYXduIG9udG8gdGhlIGV4aXN0aW5nIGltYWdlLlxyXG4gIGNvbnRleHQuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gXCJzb3VyY2Utb3ZlclwiO1xyXG4gIC8vY29udGV4dC50cmFuc2xhdGUod2lkdGggLyAyLCBoZWlnaHQgLyAyKTtcclxuICAvL2NvbnRleHQuc2NhbGUoMTIsIDgpO1xyXG4gIC8vY29udGV4dC5saW5lV2lkdGggPSAwLjI7XHJcblxyXG4gIGNvbnN0IGdyaWRXaWR0aCA9IDUwLCBncmlkSGVpZ2h0ID0gNTA7XHJcbiAgbGV0IGdyaWQgOiBBcnJheTxBcnJheTxib29sZWFuPj47XHJcbiAgXHJcbiAgZnVuY3Rpb24gcmFuZG9taXplX2dyaWQoKXtcclxuICAgIGdyaWQgPSBBcnJheTxBcnJheTxib29sZWFuPj4oZ3JpZEhlaWdodCkuZmlsbChbXSkubWFwKChhLCBpKSA9PlxyXG4gICAgICBBcnJheTxBcnJheTxib29sZWFuPj4oZ3JpZFdpZHRoKS5maWxsKFtdKS5tYXAoKGIsIGopID0+IHtcclxuICAgICAgICBpICo9IDEuMDsgaiAqPSAxLjA7XHJcbiAgICAgICAgcmV0dXJuIC0wLjQgKiBNYXRoLnJhbmRvbSgpID4gKGkgKyBqKS8oZ3JpZEhlaWdodCArIGdyaWRXaWR0aCkgKiAoKGkgKyBqKS8oZ3JpZEhlaWdodCArIGdyaWRXaWR0aCkgLSAxKTtcclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgICBncmlkWzBdWzBdID0gZ3JpZFswXVsxXSA9IGdyaWRbMV1bMF0gPSBncmlkWzFdWzFdID0gZmFsc2U7XHJcbiAgICBncmlkW2dyaWRXaWR0aC0xXVtncmlkSGVpZ2h0LTFdID0gZ3JpZFtncmlkV2lkdGgtMV1bZ3JpZEhlaWdodC0yXSA9XHJcbiAgICAgICAgZ3JpZFtncmlkV2lkdGgtMl1bZ3JpZEhlaWdodC0xXSA9IGdyaWRbZ3JpZFdpZHRoLTJdW2dyaWRIZWlnaHQtMl0gPSBmYWxzZTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHZhbGlkKHBvaW50IDogbnVtYmVyKXtcclxuICAgIHJldHVybiB5KHBvaW50KSA+PSAwICYmIHkocG9pbnQpIDwgZ3JpZEhlaWdodFxyXG4gICAgICAgICYmIHgocG9pbnQpID49IDAgJiYgeChwb2ludCkgPCBncmlkV2lkdGhcclxuICAgICAgICAmJiAhZ3JpZFt5KHBvaW50KV1beChwb2ludCldO1xyXG4gIH1cclxuICBmdW5jdGlvbiBkaXN0X2JldHdlZW4ocG9pbnQxIDogbnVtYmVyLCBwb2ludDIgOiBudW1iZXIpe1xyXG4gICAgcmV0dXJuIE1hdGguc3FydChcclxuICAgICAgKHkocG9pbnQxKSAtIHkocG9pbnQyKSkgKiAoeShwb2ludDEpIC0geShwb2ludDIpKSArXHJcbiAgICAgICh4KHBvaW50MSkgLSB4KHBvaW50MikpICogKHgocG9pbnQxKSAtIHgocG9pbnQyKSlcclxuICAgICk7XHJcbiAgICAvL3JldHVybiBNYXRoLmFicyh5KHBvaW50MSkgLSB5KHBvaW50MikpICsgTWF0aC5hYnMoeChwb2ludDEpIC0geChwb2ludDIpKTtcclxuICB9XHJcbiAgZnVuY3Rpb24gaGV1cmlzdGljX2Nvc3RfZXN0KHBvaW50MSA6IG51bWJlciwgcG9pbnQyIDogbnVtYmVyKXtcclxuICAgIHJldHVybiBkaXN0X2JldHdlZW4ocG9pbnQxLCBwb2ludDIpO1xyXG4gIH1cclxuXHJcbiAgLy8gVG8gbWFrZSBpdCBwb3NzaWJsZSB0byBwdXQgcG9pbnRzIGludG8gc2V0cywgd2UgbmVlZCBwcmltaXRpdmVzLlxyXG4gIGNvbnN0IEZVREdFID0gMTAwMDAwO1xyXG4gIGZ1bmN0aW9uIHBvaW50KHkgOiBudW1iZXIsIHggOiBudW1iZXIpe1xyXG4gICAgcmV0dXJuIHkgKiBGVURHRSArIHg7XHJcbiAgfVxyXG4gIGZ1bmN0aW9uIHgocG9pbnQgOiBudW1iZXIpe1xyXG4gICAgcmV0dXJuIHBvaW50ICUgRlVER0U7XHJcbiAgfVxyXG4gIGZ1bmN0aW9uIHkocG9pbnQgOiBudW1iZXIpe1xyXG4gICAgcmV0dXJuIE1hdGguZmxvb3IocG9pbnQgLyBGVURHRSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBnZXQobWFwIDogTWFwPG51bWJlciwgbnVtYmVyPiwga2V5IDogbnVtYmVyKSA6IG51bWJlcntcclxuICAgIGlmKG1hcC5oYXMoa2V5KSlcclxuICAgICAgcmV0dXJuIG1hcC5nZXQoa2V5KTtcclxuICAgIGVsc2VcclxuICAgICAgcmV0dXJuIEluZmluaXR5O1xyXG4gIH1cclxuXHJcbiAgY29uc3Qgc3RhcnQgPSBwb2ludCgwLCAwKSwgZ29hbCA9IHBvaW50KGdyaWRIZWlnaHQgLSAxLCBncmlkV2lkdGggLSAxKTtcclxuICBsZXQgZ1Njb3JlIDogTWFwPG51bWJlciwgbnVtYmVyPjtcclxuICBsZXQgZlNjb3JlIDogTWFwPG51bWJlciwgbnVtYmVyPjtcclxuICBsZXQgY2xvc2VkU2V0IDogU2V0PG51bWJlcj47XHJcbiAgbGV0IG9wZW5TZXQgOiBQcmlvcml0eVF1ZXVlU2V0PG51bWJlcj47XHJcbiAgbGV0IGNhbWVGcm9tIDogTWFwPG51bWJlciwgbnVtYmVyPjtcclxuXHJcbiAgZnVuY3Rpb24gaW5pdF9zZWFyY2goKXtcclxuICAgIGdTY29yZSA9IG5ldyBNYXA8bnVtYmVyLCBudW1iZXI+KCk7XHJcbiAgICBmU2NvcmUgPSBuZXcgTWFwPG51bWJlciwgbnVtYmVyPigpO1xyXG4gICAgY2xvc2VkU2V0ID0gbmV3IFNldDxudW1iZXI+KCk7XHJcbiAgICBvcGVuU2V0ID0gbmV3IFByaW9yaXR5UXVldWVTZXQ8bnVtYmVyPigoYSwgYikgPT4gZ2V0KGZTY29yZSwgYSkgPCBnZXQoZlNjb3JlLCBiKSk7XHJcbiAgICBvcGVuU2V0LnB1c2goc3RhcnQpO1xyXG4gICAgY2FtZUZyb20gPSBuZXcgTWFwPG51bWJlciwgbnVtYmVyPigpO1xyXG4gICAgZ1Njb3JlLnNldChzdGFydCwgMCk7XHJcbiAgICBmU2NvcmUuc2V0KHN0YXJ0LCBnZXQoZ1Njb3JlLCBzdGFydCkgKyBoZXVyaXN0aWNfY29zdF9lc3Qoc3RhcnQsIGdvYWwpKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGluaXRfZHJhdygpe1xyXG4gICAgY29udGV4dC5jbGVhclJlY3QoMCwgMCwgd2lkdGgsIGhlaWdodCk7XHJcbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgZ3JpZEhlaWdodDsgaSsrKVxyXG4gICAgICBmb3IodmFyIGogPSAwOyBqIDwgZ3JpZFdpZHRoOyBqKyspXHJcbiAgICAgICAgY2hhbmdlX2NvbG9yKHBvaW50KGksIGopLCBncmlkW2ldW2pdID8gQkxPQ0tFRCA6IFVORVhQTE9SRUQpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY2hhbmdlX2NvbG9yKHAgOiBudW1iZXIsIGNvbG9yIDogc3RyaW5nKSB7XHJcbiAgICBjb250ZXh0LmZpbGxTdHlsZSA9IGNvbG9yO1xyXG4gICAgY29udGV4dC5maWxsUmVjdChcclxuICAgICAgeShwKSAqIHdpZHRoIC8gZ3JpZFdpZHRoLFxyXG4gICAgICB4KHApICogaGVpZ2h0IC8gZ3JpZEhlaWdodCxcclxuICAgICAgd2lkdGggLyBncmlkV2lkdGgsXHJcbiAgICAgIGhlaWdodCAvIGdyaWRIZWlnaHRcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBjb25zdCBCTE9DS0VEID0gXCJibGFja1wiO1xyXG4gIGNvbnN0IENMT1NFRCA9IFwiIzExNVwiO1xyXG4gIGNvbnN0IE9QRU4gPSBcIiM1MTFcIjtcclxuICBjb25zdCBVTkVYUExPUkVEID0gXCIjMjIyXCI7XHJcblxyXG4gIGZ1bmN0aW9uIHNlYXJjaF9pdGVyYXRpb24oKXtcclxuICAgIGxldCBjdXJyZW50ID0gb3BlblNldC5wb3AoKTtcclxuICAgIGlmKGN1cnJlbnQgPT0gZ29hbCkge1xyXG4gICAgICBsZXQgY3VyciA9IGdvYWw7XHJcbiAgICAgIGRve1xyXG4gICAgICAgIGNoYW5nZV9jb2xvcihjdXJyLCBcIiMwOTBcIik7XHJcbiAgICAgICAgY3VyciA9IGNhbWVGcm9tLmdldChjdXJyKTtcclxuICAgICAgfXdoaWxlKGN1cnIgIT0gc3RhcnQgJiYgY3VyciAhPT0gdW5kZWZpbmVkKTtcclxuICAgICAgY2hhbmdlX2NvbG9yKHN0YXJ0LCBcIiMwOTBcIik7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgY2xvc2VkU2V0LmFkZChjdXJyZW50KTtcclxuICAgIGNoYW5nZV9jb2xvcihjdXJyZW50LCBDTE9TRUQpO1xyXG4gICAgZm9yKHZhciBkaSBvZiBbLTEsIDAsIDFdKXtcclxuICAgICAgZm9yKHZhciBkaiBvZiBbLTEsIDAsIDFdKXtcclxuICAgICAgICAvL2lmKGRpICsgZGogPT0gMCB8fCBkaSA9PSBkaikgY29udGludWU7IC8vIEEqIGRvZXNuJ3Qgd29yayB2ZXJ5IHdlbGwgd2l0aCBtYW5oYXR0YW4gbWV0cmljIGFwcGFyZW50bHk/XHJcbiAgICAgICAgbGV0IG5laWdoYm9yID0gcG9pbnQoeShjdXJyZW50KSArIGRpLCB4KGN1cnJlbnQpICsgZGopO1xyXG4gICAgICAgIGlmKCF2YWxpZChuZWlnaGJvcikgfHwgbmVpZ2hib3IgPT0gY3VycmVudCkgY29udGludWU7XHJcbiAgICAgICAgaWYoY2xvc2VkU2V0LmhhcyhuZWlnaGJvcikpIGNvbnRpbnVlOy8vIElnbm9yZSBhbHJlYWR5IGV2YWx1YXRlZCBuZWlnaGJvcnMuXHJcbiAgICAgICAgbGV0IHRlbnRhdGl2ZV9nU2NvcmUgPSBnZXQoZ1Njb3JlLCBjdXJyZW50KSArIGRpc3RfYmV0d2VlbihjdXJyZW50LCBuZWlnaGJvcik7IC8vIFRoZSBkaXN0YW5jZSBmcm9tIHN0YXJ0IHRvIGEgbmVpZ2hib3JcclxuICAgICAgICBpZighb3BlblNldC5oYXMobmVpZ2hib3IpKXtcdC8vIERpc2NvdmVyIGEgbmV3IG5vZGVcclxuICAgICAgICAgIG9wZW5TZXQucHVzaChuZWlnaGJvcik7XHJcbiAgICAgICAgICBjaGFuZ2VfY29sb3IobmVpZ2hib3IsIE9QRU4pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZih0ZW50YXRpdmVfZ1Njb3JlIDwgZ2V0KGdTY29yZSwgbmVpZ2hib3IpKXtcclxuICAgICAgICAgIC8vIFRoaXMgaXMgYSBmaXJzdCBrbm93biBvciBiZXR0ZXIgcGF0aCwgcmVjb3JkIGl0LlxyXG4gICAgICAgICAgY2FtZUZyb20uc2V0KG5laWdoYm9yLCBjdXJyZW50KTtcclxuICAgICAgICAgIGdTY29yZS5zZXQobmVpZ2hib3IsIHRlbnRhdGl2ZV9nU2NvcmUpO1xyXG4gICAgICAgICAgZlNjb3JlLnNldChuZWlnaGJvciwgZ2V0KGdTY29yZSwgbmVpZ2hib3IpICsgaGV1cmlzdGljX2Nvc3RfZXN0KG5laWdoYm9yLCBnb2FsKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZihvcGVuU2V0LnNpemUoKSA9PSAwKXtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBmcmFtZV9pdGVyYXRpb24oKSB7XHJcbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgMTsgaSsrKSB7XHJcbiAgICAgIGlmKHNlYXJjaF9pdGVyYXRpb24oKSkge1xyXG4gICAgICAgIHNldFRpbWVvdXQocmVzZXQsIDMwMDApO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnJhbWVfaXRlcmF0aW9uKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcmVzZXQoKXtcclxuICAgIHJhbmRvbWl6ZV9ncmlkKCk7XHJcbiAgICBpbml0X3NlYXJjaCgpO1xyXG4gICAgaW5pdF9kcmF3KCk7XHJcbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZyYW1lX2l0ZXJhdGlvbik7XHJcbiAgfVxyXG4gIHJlc2V0KCk7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBvbmNsaWNrdG91Y2g6IGZ1bmN0aW9uKHgsIHkpe1xyXG4gICAgICAvLyBUT0RPXHJcbiAgICB9XHJcbiAgfTtcclxufTtcclxuXHJcblxyXG4iLCIvLyBXYWl0aW5nIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvMTAxNzhcclxuLy8vIDxyZWZlcmVuY2UgdHlwZXM9XCJkM1wiLz5cclxuXHJcbi8vIExvcmVueiBTdHJhbmdlIEF0dHJhY3RvclxyXG4vLyBBZGFwdGVkIGZyb20gaHR0cDovL3dvdy50ZWNoYnJvb2QuY29tL3N0YXRpYy8yMDE1MTAyOC8yOTYwLmh0bWxcclxuXHJcbmNvbnN0IExvcmVueiA9IChzZWxlY3RvciA6IHN0cmluZykgOiB7IG9uY2xpY2t0b3VjaCA6ICh4OiBudW1iZXIsIHk6IG51bWJlcikgPT4gdm9pZCB9ID0+IHtcclxuICAvL0xvcmVueiBBdHRyYWN0b3IgUGFyYW1ldGVyc1xyXG4gIGNvbnN0IGR0ID0gMC4wMDEsIC8vICjOtM+EKSBSZXByZXNlbnRzIHRpbWUuIERyYXcgY3VydmUgLSBoaWdoZXIgdGhlIHZhbHVlLCBzdHJhaWdodGVyIHRoZSBsaW5lc1xyXG4gICAgICAgIHAgPSAyOCwgLy8gKM+BKSBwb2ludCBvZiBvcmlnaW5cclxuICAgICAgICB3ID0gMTAsIC8vICjPgyl3aWR0aCBvZiBtYWluIGVsZW1lbnQgLSBoaWdoZXIgdGhlIG51bWJlciwgbmFycm93ZXIgdGhlIHdpZHRoXHJcbiAgICAgICAgYmV0YSA9IDggLyAzOyAvLyAozrIpIHBvaW50cyBvZiBlcXVpbGlicml1bSAtIHRoaXMgYXBwbGllZCB2YWx1ZSByZXN1bHRzIGluIHRoZSBpbmZpbml0eSBzeW1ib2wuIGhpZ2hlciB2YWx1ZXMgd2lsbCBicmVhayB0aGUgZXF1aWxpYnJpdW0sIGNhdXNpbmcgdGhlIGVuZHMgdG8gc2VwYXJhdGUgYW5kIHNwcmVhZC4gV2hlbiDPgSA9IDI4LCDPgyA9IDEwLCBhbmQgzrIgPSA4LzMsIHRoZSBMb3Jlbnogc3lzdGVtIGhhcyBjaGFvdGljIHNvbHV0aW9uczsgaXQgaXMgdGhpcyBzZXQgb2YgY2hhb3RpYyBzb2x1dGlvbnMgdGhhdCBtYWtlIHVwIHRoZSBMb3JlbnogQXR0cmFjdG9yICh0aGUgaW5maW5pdHkgc3ltYm9sKS4gIElmIM+BIDwgMSB0aGVuIHRoZXJlIGlzIG9ubHkgb25lIGVxdWlsaWJyaXVtIHBvaW50LCB3aGljaCBpcyBhdCB0aGUgb3JpZ2luLiBUaGlzIHBvaW50IGNvcnJlc3BvbmRzIHRvIG5vIGNvbnZlY3Rpb24uIEFsbCBvcmJpdHMgY29udmVyZ2UgdG8gdGhlIG9yaWdpbiB3aGVuIM+BICA8IDEuICBUaGUgJ2ZvcmsnIG9jY3VycyBvY2N1cnMgYXQgz4EgPSAxLCBvciDPgSA+IDEuXHJcblxyXG4gIGxldCB3aWR0aCA6IG51bWJlciwgaGVpZ2h0IDogbnVtYmVyLCBjYW52YXMgPSBkMy5zZWxlY3Qoc2VsZWN0b3IpO1xyXG4gIGxldCBjb250ZXh0ID0gKDxIVE1MQ2FudmFzRWxlbWVudD4gY2FudmFzLm5vZGUoKSkuZ2V0Q29udGV4dChcIjJkXCIpO1xyXG4gIHdpZHRoID0gJChzZWxlY3Rvcikub3V0ZXJXaWR0aCgpO1xyXG4gIGhlaWdodCA9ICQoc2VsZWN0b3IpLm91dGVySGVpZ2h0KCk7XHJcblxyXG4gIC8vIHNldCBob3cgdGhlIG5ldyBpbWFnZXMgYXJlIGRyYXduIG9udG8gdGhlIGV4aXN0aW5nIGltYWdlLiAnbGlnaHRlcicgd2lsbCAgZGlzcGxheSB0aGUgbmV3IG92ZXIgdGhlIG9sZFxyXG4gIGNvbnRleHQuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gXCJzb3VyY2Utb3ZlclwiO1xyXG4gIGNvbnRleHQudHJhbnNsYXRlKHdpZHRoIC8gMiwgaGVpZ2h0IC8gMik7XHJcbiAgY29udGV4dC5zY2FsZSgxMiwgOCk7XHJcbiAgY29udGV4dC5saW5lV2lkdGggPSAwLjI7XHJcblxyXG4gIC8vQ29sb3IgUmFuZ2VcclxuICBsZXQgY29sb3IgPSBkMy5zY2FsZVBvdzxzdHJpbmcsIG51bWJlcj4oKVxyXG4gICAgICAgICAgICAgICAgLmRvbWFpbihbLTEwMDAwMDAsIDAsIDgsIDIzLCA1NSwgMTAwMDAwMF0pXHJcbiAgICAgICAgICAgICAgICAucmFuZ2UoW1wiIzY5OVwiLCBcIiM2OTlcIiwgXCIjMDk5XCIsIFwiIzA2OVwiLCBcIiMwMDlcIiwgXCIjMDA5XCJdKVxyXG4gICAgICAgICAgICAgICAgLmV4cG9uZW50KDEuNSlcclxuICAgICAgICAgICAgICAgIC5pbnRlcnBvbGF0ZShkMy5pbnRlcnBvbGF0ZVJnYik7XHJcblxyXG4gIGZ1bmN0aW9uIHNwYXduU3ByaXRlKGNvb3JkcyA6IFtudW1iZXIsIG51bWJlcl0pIHtcclxuICAgIC8vIFNwYXduIGEgbGluZSBhdCB0aGUgZ2l2ZW4geCwgeS5cclxuICAgIC8vIEFjY291bnQgZm9yIHNjYWxpbmcgZmFjdG9yIGFuZCBjZW50ZXJpbmdcclxuICAgIGxldCB4ID0gKGNvb3Jkc1swXSAtIHdpZHRoLzIpIC8gMTIsXHJcbiAgICAgICAgeSA9IChjb29yZHNbMV0gLSBoZWlnaHQvMikgLyA4LFxyXG4gICAgICAgIHogPSAxMCArIChNYXRoLnJhbmRvbSgpIC0gMC41KSAqIDEwLCAvLyByYW5kb20gelxyXG4gICAgICAgIG4gPSBNYXRoLnJhbmRvbSgpICogMyArIDEsIC8vIGRpZmZlcmVudCBzcGVlZHNcclxuICAgICAgICB0MSA9IE1hdGgucmFuZG9tKCkgKiA1MDAwICsgMTUwMDAsIC8vIHRpbWUgKHNlYykgaXQncyBhbGxvd2VkIHRvIHN3aXJsIGZvclxyXG4gICAgICAgIG9mZnNldCA9IE1hdGgucmFuZG9tKCkgKiAzMDsgLy8gdG8gdmFyeSB0aGUgY29sb3JzIG1vcmVcclxuXHJcbiAgICBsZXQgdCA9IGQzLnRpbWVyKGZ1bmN0aW9uKHQwKSB7XHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgKytpKSB7XHJcbiAgICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9IGNvbG9yKHogKyBvZmZzZXQpO1xyXG4gICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgY29udGV4dC5tb3ZlVG8oeCwgeSk7XHJcbiAgICAgICAgeCArPSBkdCAqIHcgKiAoeSAtIHgpO1xyXG4gICAgICAgIHkgKz0gZHQgKiAoeCAqIChwIC0geikgLSB5KTtcclxuICAgICAgICB6ICs9IGR0ICogKHggKiB5IC0gYmV0YSAqIHopO1xyXG4gICAgICAgIGNvbnRleHQubGluZVRvKHgsIHkpO1xyXG4gICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICAgIH1cclxuICAgICAgaWYodDAgPiB0MSlcclxuICAgICAgICB0LnN0b3AoKTtcclxuICAgIH0pO1xyXG4gIH1cclxuICBcclxuICAvL3N0YXJ0IGJsYWNrXHJcbiAgY29udGV4dC5maWxsU3R5bGUgPSBcInJnYigwLDAsMClcIjtcclxuICBjb250ZXh0LmZpbGxSZWN0KC13aWR0aC8yLCAtaGVpZ2h0LzIsIHdpZHRoLCBoZWlnaHQpO1xyXG4gIFxyXG4gIC8vc291cmNlLWF0b3AgZHJhd3Mgb2xkIGltYWdlIG9uIHRvcCBvZiB0aGUgbmV3IGltYWdlLCBlbGltaW5hdGluZyB0aGUgcGFydCBvZiB0aGUgb2xkIGltYWdlIHRoYXQgaXMgb3V0c2lkZSBvZiB0aGUgbmV3IGltYWdlIHJhbmdlLlxyXG4gIGNvbnRleHQuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gXCJzb3VyY2UtYXRvcFwiO1xyXG4gIGNvbnRleHQuZmlsbFN0eWxlID0gXCJyZ2JhKDAsMCwwLC4wNSlcIjtcclxuICBmdW5jdGlvbiBmYWRlVGljaygpe1xyXG4gICAgY29udGV4dC5maWxsUmVjdCgtd2lkdGgvMiwgLWhlaWdodC8yLCB3aWR0aCwgaGVpZ2h0KTtcclxuICB9XHJcblxyXG4gIC8vIEdlbmVyYXRlIGEgcmFuZG9tIHBvaW50IG9uIHRoZSBlZGdlcyBvZiB0aGUgc2NyZWVuXHJcbiAgY29uc3QgZ2V0UmFuZG9tUG9pbnQgPSAoKSA6IFtudW1iZXIsIG51bWJlcl0gPT4ge1xyXG4gICAgbGV0IHggOiBudW1iZXIsIHkgOiBudW1iZXI7XHJcbiAgICBpZihNYXRoLnJhbmRvbSgpID4gMC41KXtcclxuICAgICAgeCA9IHdpZHRoICogTWF0aC5yYW5kb20oKTtcclxuICAgICAgeSA9IChNYXRoLnJhbmRvbSgpID4gMC41KSA/IGhlaWdodCA6IDA7XHJcbiAgICB9ZWxzZXtcclxuICAgICAgeSA9IGhlaWdodCAqIE1hdGgucmFuZG9tKCk7XHJcbiAgICAgIHggPSAoTWF0aC5yYW5kb20oKSA+IDAuNSkgPyB3aWR0aCA6IDA7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gW3gseV07XHJcbiAgfVxyXG5cclxuICBkMy5pbnRlcnZhbChmdW5jdGlvbihlbGFwc2VkVGltZSl7c3Bhd25TcHJpdGUoZ2V0UmFuZG9tUG9pbnQoKSk7fSwgMTAwMCk7XHJcbiAgZDMuaW50ZXJ2YWwoZnVuY3Rpb24oZWxhcHNlZFRpbWUpe2ZhZGVUaWNrKCk7fSwgMjAwKTtcclxuICBmb3IobGV0IGkgPSAwOyBpIDwgMjA7IGkrKyl7XHJcbiAgICBzcGF3blNwcml0ZShnZXRSYW5kb21Qb2ludCgpKTtcclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBvbmNsaWNrdG91Y2g6IGZ1bmN0aW9uKHgsIHkpe1xyXG4gICAgICBzcGF3blNwcml0ZShbeCwgeV0pO1xyXG4gICAgfVxyXG4gIH07XHJcbn07XHJcbiIsIi8vLyA8cmVmZXJlbmNlIHR5cGVzPVwianF1ZXJ5XCIvPlxyXG4vLy8gPHJlZmVyZW5jZSB0eXBlcz1cImpzLWNvb2tpZVwiLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vTG9yZW56LnRzXCIvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9HcmlkU2VhcmNoLnRzXCIvPlxyXG5cclxuJChmdW5jdGlvbigpIHtcclxuICAvLyBHcmF2aXRhdGlvbiwgU3dhcm0gaW50ZWxsaWdlbmNlLCBEZWxhdW5heSBmYWNlLCBtYWNoaW5lIGxlYXJuaW5nLCBzdGVyZW9zY29waWMgc2ltdWxhdGlvbnMsIEh5cGVybG9vcCFcclxuICBjb25zdCBhbmltYXRpb25zID0gW1xyXG4gICAge1xyXG4gICAgICB0aXRsZTogJ0xvcmVueiBTdHJhbmdlIEF0dHJhY3RvcicsXHJcbiAgICAgIGRlc2M6ICdBIGJlYXV0aWZ1bCBjaGFvdGljIGF0dHJhY3Rvci4gQ2xpY2sgb3IgdGFwIGFueXdoZXJlIHRvIGFkZCBzdHJlYW1lcnMuJyxcclxuICAgICAgaW5pdDogTG9yZW56LFxyXG4gICAgICBzY2FsaW5nOiAna2VlcC1hc3BlY3QtcmF0aW8nXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICB0aXRsZTogJ0EqIEdyaWQgU2VhcmNoJyxcclxuICAgICAgZGVzYzogJ0Egc2ltcGxlIHBhdGhmaW5kaW5nIGFsZ29yaXRobS4nLFxyXG4gICAgICBpbml0OiBHcmlkU2VhcmNoLFxyXG4gICAgICBzY2FsaW5nOiAnc3RyZXRjaCdcclxuICAgIH0sXHJcbiAgXTtcclxuXHJcbiAgLy8gUGljayBhIHJhbmRvbSBhbmltYXRpb24uXHJcbiAgbGV0IGFuaW1hdGlvbkluZGV4O1xyXG4gIGxldCBwcmV2QW5pbWF0aW9uSW5kZXggPSBDb29raWVzLmdldEpTT04oJ2FuaW1hdGlvbkluZGV4JykgJiYgQ29va2llcy5nZXRKU09OKCdhbmltYXRpb25JbmRleCcpLmkgfHwgLTE7XHJcbiAgZG97XHJcbiAgICBhbmltYXRpb25JbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGFuaW1hdGlvbnMubGVuZ3RoKTtcclxuICB9IHdoaWxlKGFuaW1hdGlvbnMubGVuZ3RoID4gMSAmJiBhbmltYXRpb25JbmRleCA9PSBwcmV2QW5pbWF0aW9uSW5kZXgpO1xyXG4gIENvb2tpZXMuc2V0KCdhbmltYXRpb25JbmRleCcsIHtpOiBhbmltYXRpb25JbmRleH0pO1xyXG4gIGxldCBhbmltYXRpb24gPSBhbmltYXRpb25zW2FuaW1hdGlvbkluZGV4XTtcclxuXHJcbiAgY29uc3QgZ2V0RGltcyA9ICgpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHdpZHRoOiAkKCdib2R5Jykub3V0ZXJXaWR0aCgpLFxyXG4gICAgICBoZWlnaHQ6ICQoJ2JvZHknKS5vdXRlckhlaWdodCgpLFxyXG4gICAgICByYXRpbzogJCgnYm9keScpLm91dGVyV2lkdGgoKSAvICQoJ2JvZHknKS5vdXRlckhlaWdodCgpLFxyXG4gICAgfTtcclxuICB9O1xyXG5cclxuICAvLyBTZXQgb3JpZ2luYWwgY2FudmFzIGRpbWVuc2lvbnNcclxuICBsZXQgb3JpZ19kaW1zID0gZ2V0RGltcygpO1xyXG4gICQoJ2NhbnZhcyNzcGxhc2gnKS5hdHRyKG9yaWdfZGltcyk7XHJcblxyXG4gIC8vIE1ha2UgdGhlIGNhbnZhcyBhdXRvbWF0aWNhbGx5IHJlc2l6ZSB3aXRob3V0IHJlZHJhd2luZyAoQ1NTIHJlc2l6ZSBvbmx5KVxyXG4gICQod2luZG93KS5yZXNpemUoKCkgPT4ge1xyXG4gICAgbGV0IGN1cnJfZGltcyA9IGdldERpbXMoKTtcclxuICAgIGlmKGFuaW1hdGlvbi5zY2FsaW5nID09ICdzdHJldGNoJykge1xyXG4gICAgICAkKCdjYW52YXMjc3BsYXNoJykuY3NzKHtcclxuICAgICAgICB3aWR0aDogY3Vycl9kaW1zLndpZHRoLFxyXG4gICAgICAgIGhlaWdodDogY3Vycl9kaW1zLmhlaWdodFxyXG4gICAgICB9KTtcclxuICAgIH0gZWxzZSBpZihhbmltYXRpb24uc2NhbGluZyA9PSAna2VlcC1hc3BlY3QtcmF0aW8nKSB7XHJcbiAgICAgICQoJ2NhbnZhcyNzcGxhc2gnKS5jc3MoY3Vycl9kaW1zLnJhdGlvID4gb3JpZ19kaW1zLnJhdGlvID8ge1xyXG4gICAgICAgIHdpZHRoOiBjdXJyX2RpbXMud2lkdGgsXHJcbiAgICAgICAgaGVpZ2h0OiBjdXJyX2RpbXMud2lkdGggLyBvcmlnX2RpbXMucmF0aW8sXHJcbiAgICAgICAgJ21hcmdpbi1sZWZ0JzogMCxcclxuICAgICAgICAnbWFyZ2luLXRvcCc6IChjdXJyX2RpbXMuaGVpZ2h0IC0gY3Vycl9kaW1zLndpZHRoIC8gb3JpZ19kaW1zLnJhdGlvKSAvIDJcclxuICAgICAgfSA6IHtcclxuICAgICAgICB3aWR0aDogY3Vycl9kaW1zLmhlaWdodCAqIG9yaWdfZGltcy5yYXRpbyxcclxuICAgICAgICBoZWlnaHQ6IGN1cnJfZGltcy5oZWlnaHQsXHJcbiAgICAgICAgJ21hcmdpbi1sZWZ0JzogKGN1cnJfZGltcy53aWR0aCAtIGN1cnJfZGltcy5oZWlnaHQgKiBvcmlnX2RpbXMucmF0aW8pIC8gMixcclxuICAgICAgICAnbWFyZ2luLXRvcCc6IDBcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfSkucmVzaXplKCk7XHJcblxyXG4gIC8vIERlYWwgd2l0aCBzY2FsaW5nIHByb2JsZW1zIGZvciBvbmNsaWNrL3RvdWNoXHJcbiAgJCh3aW5kb3cpLm9uKFwibW91c2Vkb3duIGNsaWNrIHRvdWNoc3RhcnQgdGFwIHRvdWNoXCIsIChlKSA9PiB7XHJcbiAgICBsZXQgY3Vycl9kaW1zID0gZ2V0RGltcygpO1xyXG4gICAgaWYoYW5pbWF0aW9uLnNjYWxpbmcgPT0gJ3N0cmV0Y2gnKSB7XHJcbiAgICAgIHJldHVybiBwcm9wcy5vbmNsaWNrdG91Y2goXHJcbiAgICAgICAgKGUucGFnZVgpIC8gKGN1cnJfZGltcy53aWR0aCAvIG9yaWdfZGltcy53aWR0aCksXHJcbiAgICAgICAgKGUucGFnZVkpIC8gKGN1cnJfZGltcy5oZWlnaHQgLyBvcmlnX2RpbXMuaGVpZ2h0KVxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZihhbmltYXRpb24uc2NhbGluZyA9PSAna2VlcC1hc3BlY3QtcmF0aW8nKSB7XHJcbiAgICAgIGxldCBzY2FsZSA9IGN1cnJfZGltcy5yYXRpbyA+IG9yaWdfZGltcy5yYXRpbyA/XHJcbiAgICAgICAgY3Vycl9kaW1zLndpZHRoIC8gb3JpZ19kaW1zLndpZHRoIDpcclxuICAgICAgICBjdXJyX2RpbXMuaGVpZ2h0IC8gb3JpZ19kaW1zLmhlaWdodDtcclxuICAgICAgcmV0dXJuIHByb3BzLm9uY2xpY2t0b3VjaChcclxuICAgICAgICAoZS5wYWdlWCAtIHBhcnNlSW50KCQoJ2NhbnZhcyNzcGxhc2gnKS5jc3MoJ21hcmdpbi1sZWZ0JykpKSAvIHNjYWxlLFxyXG4gICAgICAgIChlLnBhZ2VZIC0gcGFyc2VJbnQoJCgnY2FudmFzI3NwbGFzaCcpLmNzcygnbWFyZ2luLXRvcCcpKSkgLyBzY2FsZVxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICAvLyBGZXRjaCBhbmQgcnVuIHRoZSBzaW11bGF0aW9uXHJcbiAgbGV0IHByb3BzID0gYW5pbWF0aW9uLmluaXQoXCJjYW52YXMjc3BsYXNoXCIpO1xyXG5cclxuICAvLyBOb3cgdGhhdCBpdCdzIGxvYWRlZCwgZmFkZSBpbiBhbmQgYWRkIGNvbnRlbnRcclxuICAkKCdjYW52YXMjc3BsYXNoJykuY3NzKHsgb3BhY2l0eTogMSB9KTtcclxuICAkKCcjc2ltdWxhdGlvbi1uYW1lJykudGV4dChhbmltYXRpb24udGl0bGUpO1xyXG4gICQoJyNzaW11bGF0aW9uLW5vdGUnKS5odG1sKGFuaW1hdGlvbi5kZXNjICsgXCI8ZGl2PlJlbG9hZCBmb3IgYW5vdGhlciBhbmltYXRpb24hPC9kaXY+XCIpO1xyXG4gIHJldHVybiAkKCcjc2ltdWxhdGlvbi1pbmZvJykuc2hvdygpO1xyXG59KTtcclxuIl19
